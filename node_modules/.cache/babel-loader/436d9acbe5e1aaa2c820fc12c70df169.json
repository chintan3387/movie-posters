{"ast":null,"code":"import _defineProperty from \"/Users/chintan.desai/Projects/movie-db-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nconst IMAGE_BASE_URL = (width = 300) => \"https://image.tmdb.org/t/p/w\".concat(width);\n\nconst updateMoviePosterUrl = (movieResult, width = 300) => _objectSpread({}, movieResult, {\n  backdrop_path: \"\".concat(IMAGE_BASE_URL(width)).concat(movieResult.backdrop_path),\n  poster_path: \"\".concat(IMAGE_BASE_URL(width)).concat(movieResult.poster_path)\n});\n\nexport const getMovieList = moviesList => {\n  return !!moviesList ? [...moviesList.results.map(movie => updateMoviePosterUrl(movie))] : null;\n};\nexport const createReducer = (initialState = {}, actionHandlers = {}) => {\n  return (state = initialState, action) => {\n    const actionHandler = actionHandlers[action.type];\n    return actionHandler ? actionHandler(state, action) : state;\n  };\n};\n\nconst creatAction = (type, props) => {\n  return _objectSpread({\n    type\n  }, props);\n};\n\nexport const createAsyncActionCreator = (actionType, asyncFn, requestParams) => {\n  return dispatch => {\n    dispatch(createAction(\"{actionType}_START\", {\n      request: requestParams\n    }));\n    return asyncFn(requestParams).then(response => {\n      response.json().then(json => dispatch(createAction(\"{actionType}_SUCCESS\", {\n        response: json\n      }))).catch(err => dispatch(createAction(\"{actionType}_ERROR\", {\n        error\n      })));\n    });\n  };\n};\nconst initialAsyncState = {\n  isLoading: false,\n  response: null,\n  request: null\n};\nexport const createAsyncReducer = (actionType, actionHandlerFuncs = {}, inititalState = initialAsyncState) => {\n  const startReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: true,\n    request: action.request\n  });\n\n  const successReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    response: action.response\n  });\n\n  const errorReducerFn = (state, action) => _objectSpread({}, state, {\n    isLoading: false,\n    error: action.error\n  });\n\n  return createReducer(initialState, _objectSpread({\n    [\"{actionType}_START\"]: startReducerFn,\n    [\"{actionType}_SUCCESS\"]: successReducerFn,\n    [\"{actionType}_ERROR\"]: errorReducerFn\n  }, actionHandlerFuncs));\n};","map":{"version":3,"sources":["/Users/chintan.desai/Projects/movie-db-app/src/common/helper.js"],"names":["IMAGE_BASE_URL","width","updateMoviePosterUrl","movieResult","backdrop_path","poster_path","getMovieList","moviesList","results","map","movie","createReducer","initialState","actionHandlers","state","action","actionHandler","type","creatAction","props","createAsyncActionCreator","actionType","asyncFn","requestParams","dispatch","createAction","request","then","response","json","catch","err","error","initialAsyncState","isLoading","createAsyncReducer","actionHandlerFuncs","inititalState","startReducerFn","successReducerFn","errorReducerFn"],"mappings":"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","sourcesContent":["const IMAGE_BASE_URL = (width=300) => `https://image.tmdb.org/t/p/w${width}`;\n\nconst updateMoviePosterUrl = (movieResult, width = 300) =>({\n    ...movieResult,\n    backdrop_path: `${IMAGE_BASE_URL(width)}${movieResult.backdrop_path}`,\n    poster_path: `${IMAGE_BASE_URL(width)}${movieResult.poster_path}`\n});\n\nexport const getMovieList = (moviesList) => {\n    return !!moviesList ? ([\n        ...moviesList.results.map(movie => updateMoviePosterUrl(movie))\n    ]) : null;\n}\n\nexport const createReducer = (initialState = {}, actionHandlers = {}) => {\n    return (state = initialState, action) => {\n        const actionHandler = actionHandlers[action.type];\n        return actionHandler ? actionHandler(state, action) : state;\n    }\n};\n\nconst creatAction = (type, props) => {\n    return {\n        type,\n        ...props\n    };\n}\n\nexport const createAsyncActionCreator = (actionType, asyncFn, requestParams) => {\n    return (dispatch) => {\n        dispatch(createAction(`{actionType}_START`,  {request: requestParams}));\n        return asyncFn(requestParams)\n            .then(response => {\n                response.json()\n                    .then(json => dispatch(createAction(`{actionType}_SUCCESS` , {response: json})))\n                    .catch(err => dispatch(createAction(`{actionType}_ERROR`, { error })))\n            });\n    };\n}\n\nconst initialAsyncState = { isLoading: false, response: null, request: null};\n\n\nexport const createAsyncReducer = (actionType, actionHandlerFuncs = {}, inititalState = initialAsyncState) => {\n    const startReducerFn = (state, action) => ({\n        ...state,\n        isLoading: true,\n        request: action.request\n    });\n\n    const successReducerFn = (state, action) => ({\n        ...state,\n        isLoading: false,\n        response: action.response\n    });\n\n    const errorReducerFn = (state, action) => ({\n        ...state,\n        isLoading: false,\n        error: action.error\n    });\n\n    return createReducer(\n        initialState,\n        {\n            [`{actionType}_START`]: startReducerFn,\n            [`{actionType}_SUCCESS`]: successReducerFn,\n            [`{actionType}_ERROR`]: errorReducerFn,\n            ...actionHandlerFuncs\n        }\n    );\n}\n"]},"metadata":{},"sourceType":"module"}